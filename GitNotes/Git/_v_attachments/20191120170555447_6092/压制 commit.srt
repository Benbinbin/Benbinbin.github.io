1
00:00:00,000 --> 00:00:07,379
让我们使用 git rebase -i HEAD~3 压制 (squash) 最后三个 commit

2
00:00:07,379 --> 00:00:11,375
这样就会显示我们在项目中提交的最后三个 commit

3
00:00:11,375 --> 00:00:14,574
要注意的一点是 这些 commit 按逆向时间顺序显示

4
00:00:14,574 --> 00:00:18,619
底部的这个实际上是最近的 commit

5
00:00:18,620 --> 00:00:21,760
现在看看每列

6
00:00:21,760 --> 00:00:24,495
最后一列是提交说明

7
00:00:24,495 --> 00:00:27,760
中间一列是 commit SHA

8
00:00:27,760 --> 00:00:30,270
第一列是你输入的

9
00:00:30,269 --> 00:00:33,274
希望 git rebase 实际执行的命令

10
00:00:33,274 --> 00:00:38,409
git rebase 是个很强大的工具 具有多个命令

11
00:00:38,409 --> 00:00:40,844
下面列出了这些命令

12
00:00:40,844 --> 00:00:44,189
可以看到目前这些都是 pick

13
00:00:44,189 --> 00:00:47,229
pick 表示使用这个 commit

14
00:00:47,229 --> 00:00:49,890
因此 如果保存文件并立即退出

15
00:00:49,890 --> 00:00:53,935
这三个 commit 都会被保存

16
00:00:53,935 --> 00:00:56,761
虽然我们使用 rebase 并准备压制这些 commit

17
00:00:56,761 --> 00:00:58,330
如果将这些命令设为 pick

18
00:00:58,329 --> 00:01:02,774
所有这三个 commit 都会存在 但是将具有不同的 SHA

19
00:01:02,774 --> 00:01:06,209
Lam 想要将最后三个 commit 压制成一个

20
00:01:06,209 --> 00:01:08,429
实际上是其中一种命令

21
00:01:08,429 --> 00:01:12,164
也就是这里的 s 或输入整个单词 squash (压制)

22
00:01:12,164 --> 00:01:16,665
squash 表示使用这些 commit 但是合并到前一个 commit 中

23
00:01:16,665 --> 00:01:21,150
我们对这个 commit 输入 s 表示 squash

24
00:01:21,150 --> 00:01:23,265
这个改为 squash

25
00:01:23,265 --> 00:01:25,500
这个不能改成 squash

26
00:01:25,500 --> 00:01:27,894
因为这个 commit 前面没有 commit

27
00:01:27,894 --> 00:01:32,199
会导致错误 因此这个需要保持为 pick

28
00:01:32,200 --> 00:01:36,090
如果使用这些命令 pick、squash 和 squash

29
00:01:36,090 --> 00:01:39,659
它将会把这两个 commit 压制到这个 commit 中

30
00:01:39,659 --> 00:01:42,418
但是将使用这个提交说明

31
00:01:42,418 --> 00:01:45,030
这样会有误导性

32
00:01:45,030 --> 00:01:47,751
因为我们添加的是目的地 Florida、Paris 和 Scotland

33
00:01:47,751 --> 00:01:52,390
因此我们希望重写新的提交说明替代它

34
00:01:52,390 --> 00:01:54,269
实际上有一个命令可以使用

35
00:01:54,269 --> 00:01:57,750
也就是 reword 或简写为 r

36
00:01:57,750 --> 00:02:02,329
我将 pick 改为 r 我们再最后讲解一遍

37
00:02:02,329 --> 00:02:06,200
这是 r 命令 所以我们将重新编写这个提交说明

38
00:02:06,200 --> 00:02:07,755
因此我们将保留这个 commit

39
00:02:07,754 --> 00:02:10,025
但是会更改提交说明

40
00:02:10,025 --> 00:02:14,245
s 表示将这个 commit 压制到上一个 commit 上

41
00:02:14,245 --> 00:02:16,849
这个也类似 将这个 commit 压制到上一个 commit

42
00:02:16,849 --> 00:02:20,469
然后同时合并到这个 commit 中

43
00:02:20,469 --> 00:02:24,949
我们保存这个文件并退出编辑器进行 rebase (变基)

44
00:02:24,949 --> 00:02:27,655
我们要执行的 rebase 是多步骤流程

45
00:02:27,655 --> 00:02:31,044
第一步是重写这个提交说明

46
00:02:31,044 --> 00:02:34,854
我将其改为 Add Richard’s destinations

47
00:02:34,854 --> 00:02:38,889
保存文件然后退出编辑器并继续 rebase 流程

48
00:02:38,889 --> 00:02:40,994
这是 rebase 的最后一步

49
00:02:40,995 --> 00:02:44,295
可以看出这是前三个 commit 的合并 commit

50
00:02:44,294 --> 00:02:46,789
这是我们将压制的 commit

51
00:02:46,789 --> 00:02:51,685
第一个 commit 即三个 commit 中最早的 commit 是我们刚刚重写过提交说明的 commit

52
00:02:51,685 --> 00:02:56,313
“Add Richard's destinations” 这里是第二个 commit 的提交说明

53
00:02:56,313 --> 00:02:58,519
这是最后一个 commit 的提交说明

54
00:02:58,520 --> 00:03:00,784
我将删除所有这些

55
00:03:00,784 --> 00:03:04,579
并将 Add Richard's destinations 作为提交说明

56
00:03:04,580 --> 00:03:06,620
注意开头有 # 的行都是注释

57
00:03:06,620 --> 00:03:09,770
不会出现在提交说明中

58
00:03:09,770 --> 00:03:12,450
我们可以删掉这两行

59
00:03:12,449 --> 00:03:16,629
保存文件 然后退出编辑器并完成 rebase

60
00:03:16,629 --> 00:03:20,400
成功了 我们 rebase 了最后三个 commit

61
00:03:20,400 --> 00:03:22,920
快速查看下 git log

62
00:03:22,919 --> 00:03:24,734
可以在这里看到

63
00:03:24,735 --> 00:03:30,140
include-richards-destinations 分支在 master 分支前只有一个 commit

64
00:03:30,139 --> 00:03:33,654
但是在远程仓库上有这三个 commit

65
00:03:33,655 --> 00:03:39,335
这三个 commit 被压制到这个 commit 上

66
00:03:39,335 --> 00:03:42,275
我们清空下屏幕

67
00:03:42,275 --> 00:03:46,335
并尝试将此分支推送到远程仓库上

68
00:03:46,335 --> 00:03:49,460
可以看到这个推送被拒绝了

69
00:03:49,460 --> 00:03:53,110
因为远程仓库具有这个仓库没有的 commit

70
00:03:53,110 --> 00:03:56,490
因此我们需要强制推送这些更改

71
00:03:56,490 --> 00:03:59,050
成功了

72
00:03:59,050 --> 00:04:02,520
这是 Pull Request (拉取请求) 页面 我尚未刷新

73
00:04:02,520 --> 00:04:07,055
可以看到原始的三个 commit 列在了这里以及这里

74
00:04:07,055 --> 00:04:08,290
如果稍微向下滚动

75
00:04:08,289 --> 00:04:12,079
可以看到我在这个 Pull Request 上创建了新的 commit

76
00:04:12,080 --> 00:04:15,365
这是我们强制推送的 commit

77
00:04:15,365 --> 00:04:18,160
现在滚动到顶部并刷新页面

78
00:04:18,160 --> 00:04:20,485
可以看到所有这些数字变了

79
00:04:20,485 --> 00:04:23,434
这里列出的三个 commit 消失了

80
00:04:23,434 --> 00:04:27,035
这个 Pull Request 显示 Pull Request 中只有 1 个 commit

81
00:04:27,035 --> 00:04:30,830
也就是这个 commit

82
00:04:30,829 --> 00:04:32,919
转到 Files changed 标签页

83
00:04:32,920 --> 00:04:35,170
会发现更改完全一样

84
00:04:35,170 --> 00:04:37,090
这些是 css 更改

85
00:04:37,089 --> 00:04:39,750
这些是 html 更改

86
00:04:39,750 --> 00:04:43,910
但是现在都合并成了一个 commit

