vnote_backup_file_826537664 D:/Front_end/CSS/常用属性.md
# 常用属性

## 简写属性
参考：[CSS 简写属性 (CSS Shorthand Properties)](https://developer.mozilla.org/zh-CN/docs/Web/CSS/Shorthand_properties)

简写属性是把关于同一主题的常见属性的定义集中在一起，同时设置多个 CSS 属性值，编写更简洁、更具可读性的样式表。如 `background` 是简写属性，可以定义相应属性 `background-color`、`background-image`、`background-repeat` 和 `background-position` 的值。类似还有字体 `font`、盒子 `box`、各方向的外边距 `margin` 和 `padding` 等。

### Background 属性
简写属性 `background` 包含以下属性

* `background-color`
* `background-image`
* `background-repeat`
* `background-position`

可以简写成一行属性，依次为其次级属性赋值
```css
background: #000 url(images/bg.gif) no-repeat top right;
```

### Font 属性
简写属性 `font` 包含以下属性

* `font-style`
* `font-weight`
* `font-size`
* `line-height`
* `font-family`

可以简写成一行属性，依次为其次级属性赋值
```css
font: italic bold .8em/1.2 Arial, sans-serif;
```

**注意**：

* 在使用简写属性没有指定其包含的部分次级属性值时，该次级属性会赋予默认值，应注意引起未预期的覆盖行为

    ```css
    /* background-color 默认值为 transparent */
    background-color: red;
    background: url(images/bg.gif) no-repeat top right;
    ```
    **解释**：以上样式不会将 `background-color` 设置为 `red`，而是使用默认值 `transparent`，因为第二条规则优先
    
* 当简写属性替代属性的值是**不同类型**的值时，对其顺序无强制性要求；若设置的属性值为相同类型值的时候，处理这些情况分多种类型，如 `margin` 和 `padding` 等与盒子模型相关的属性
    示例：设置盒子模型边框宽度属性 `border-width` 使用 **1-4 值** 的语法
    
    |                         图示                          |                    方法                     |                                                                         备注                                                                          |
    | ---------------------------------------------------- | ------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------- |
    | ![border1](_v_images/20190817140659692_14188.png)	 | 1个值的语法：`border-width: 1em`             | 设置所有边框宽度                                                                                                                                       |
    | ![border2](_v_images/20190817140822692_3797.png)     | 	2个值的语法：`border-width: 1em 2em`        | 第一个值设置垂直方向 `top` 和 `bottom` 边框宽度；第二个值设置水平方向 `left` 和 `right` 边框宽度                                                            |
    | ![border3](_v_images/20190817141018495_4993.png)     | 3个值的语法：`border-width: 1em 2em 3em`     | 第一个值表示 `top`；第二个值表示水平方向的，即 `left` 和 `right`； 第三个值表示 `bottom`                                                                   |
    | ![border4](_v_images/20190817141105981_19956.png)    | 4个值的语法：`border-width: 1em 2em 3em 4em` | 这四个值分别表示 `top`、`right`、`bottom`、`left`，即从 `top` 开始的顺时针顺序（提示：`Top-Right-Bottom-Left` 首字母与英文单词 `trouble` 的顺序一致：`TRBL`） |

## 字体

### 字体类型 font-family
属性 `font-family` 设置字体类型。
```css
font-family: font1, font2, font3 ...；
```

选用字体原则：
* 指定页面使用的字体类型，**每个操作系统附带一组预先安装的字体**，使用这些字体定制网站可以避免显示错误，应首先考虑。
* 通过指定多个字体，以确保用户无论使用哪种操作系统都可获得一致的体验（因为并非所有字体在每个操作系统上都适用）。浏览器从左到右查看提供的备选字体，选择可以正确渲染文本的第一种字体。

**自定义字体**
用户可以使用自定义字体，如 [Google Fonts](http://www.google.com/fonts) | [中文版](http://www.googlefonts.cn/) 获取开源字体。使用自定义字体时，需要在 HTML 文件的 `<head>` 标签中提供渲染字体所需文件的链接，以供浏览器自动下载

![Google Fonts 自定义字体](_v_images/20191002191122875_17918.png =710x)

index.html
```html
<html lang="en" dir="ltr">
    <head>
        <meta charset="utf-8">
        <title>Test</title>
        <link rel="stylesheet" href="css/main.css">
        /* 使用自定义字体 Lato */
        <link href="https://fonts.font.im/css?family=Lato" rel="stylesheet">
    </head>
    <body>
```

style.css
```css
* {
    font-family: 'Lato', sans-serif;
  }
```

**注意**：使用自定义字体应**至少指定一个备用字体**以防无法加载自定义字体。

### 字体大小 font-size
属性 `font-size` 设置[字体大小](https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-size)

设置字体大小时需要**提供单位**，有绝对单位和相对单位两种：
* 像素 `px`，**默认大小是 `16px`**，绝对单位
* 百分数 `%`，**默认大小是`100%`**（相当于 `16px`），相对单位
* `em` 值，`em` = 希望得到的像素大小 / 父元素字体像素大小，当父元素字体未设置则默认值是 `16px`，相对单位


### 字体颜色 color
属性 `color` 设置字体颜色

多种方式表示颜色属性值：
* **`RGB` 编码模式**：用三个数字分别指定红色，绿色，蓝色不同比例的搭配，如绿色为 `rgb(0,250,0)`，三个参数值范围是 `0-255`，或 `0％-100％`
* **十六进制编码模式**：使用16进制/ `#` 加四位数表示颜色值，**如果每两位的值相同可缩写表示**，如 `color: #aabbcc` 可简写为 `color: #abc`
* **颜色名称模式**：浏览器可以识别**147种**定义的颜色名称，如常见的`red`、`blue`、`orange`


颜色设置相关工具：
* Chrome 的开发者工具提供**[取色器 Color Picker tool](https://developers.google.com/web/tools/chrome-devtools/inspect-styles/edit-styles#color-picker)** 可快速获取网页的颜色信息
    > 要打开 Color Picker，请在 Styles 窗格中查找一个定义颜色的 CSS 声明（例如 color: blue）。 声明值的左侧有一个带颜色的小正方形。 正方形的颜色与声明值匹配。 点击小正方形可以打开 Color Picker。
* [十六进制色与 RGB 转换](https://www.webfx.com/web-design/hex-to-rgb/)
* [RGB 与16进制色互转工具](https://tool.css-js.com/rgba.html)

### 字重 font-weight
属性是 `font-weight` 设置字体粗体

两种方式设置字体粗细：
* **名称**：标准`normal` 和加粗 `bold`
* **数字**：字重范围 **`100-900`** 由细到粗。**`400`相当于正常粗细 `normal`，`700`相当于加粗 `bold`**


### 字形 font-style
属性 `font-style` 设置字形

* **常规字体**属性值为 `normal`，选择 `font-family` 的常规字体。
* **斜体**属性值为 `italic`，如果当前字体没有可用的斜体版本，会选用倾斜体 oblique 替代
* **倾斜体**属性值为 `oblique`，可在后附加一个参数设置倾斜角度，单位为 `deg`

**解释**：斜体 italic 和倾斜体 oblique 都是通过人工倾斜常规字体的字形来模拟的，Italic 样式一般是指书写体，相比无样式的字体，通常会占用较少的高度，而 oblique 字形一般只是常规字形的倾斜版本。

## 文本
### 大小写 text-transform
属性 `text-transform` 设置文本大小写转换

|    属性值     |                                            转换效果                                             |
| ------------ | ----------------------------------------------------------------------------------------------- |
| `capitalize` | 每个单词**首字母**大写                                                               **          |
| `uppercase`  | 所有字母大写                                                                    **               |
| `lowercase`  | 所有字符小写                                                                    **               |
| `none`       | 阻止所有字母的大小写转换                                                                          |
| `full-width` | 强制字符（主要是表意字符和拉丁文字）书写进一个方形里，并允许它们按照一般的东亚文字（比如中文或日文）对齐 |

参考：[text-transform - CSS（层叠样式表） | MDN](https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-transform)

### 文本线 text-decoration
属性 `text-decoration` 设置文本线以修饰文本

* 属性值 `overline` 设置上划线
* 属性值 `underline` 设置下划线
* 属性值`line-through` 设置删除线

### 字间距 letter-spacing
字距是印刷业用来描述**字母之间空隙**的一个术语

属性 `letter-spacing` 设置字间距，

* 赋予一个数字（正负值均可）并需要指定单位 `em` 或 `px` 等来设置字间距
* 属性值 `normal` 按照当前字体的正常间距确定，等同于间距 `0`

**注意**：一个很大的正或负的值会让单词变为不可读。很大的正值使字母之间的距离很远，单词将显示为一系列单独的，无有任何关联的字母；很大的负值字母将会互相重叠到一个点，可能无法识别。

### 投影 text-shadow
属性 `text-shadow` 设置[文本投影效果](https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-shadow)，可以设置阴影在 X 和 Y 方向的偏移量、模糊半径和颜色值。

* 水平阴影：正为右，负为左。需要提供单位，如 `px`
* 垂直阴影：正为下方，负为上方。需要提供单位，如 `px`
* 阴影模糊距离：值越大越模糊。需要提供单位，如 `px`
* 阴影颜色：可以用 rgb 值、颜色名称或十六进制色

**注意**：
* 可以对同一段文本设置多个阴影，之间逗号 `,` 分隔；阴影应用的顺序为从前到后, 第一个指定的阴影在顶部
* 每个阴影都有两（仅设置水平与垂直阴影）到三个 `<length>` 参数 ， 以及一个与阴影颜色相关的 `<color>`参数 。

代码：`<p style="font-size: 40px;text-shadow: 4px 5px 1px #666666">text</p>`

## 段落
### 行间距 line-height
行间距属性是 `line-height`

属性值需要指定**单位**为 `em`，**`1em`相当于当前字体的尺寸**作为行间距，`2em`就等于当前字体的两倍

### 对齐方式 text-align
对齐方式的属性是 `text-align`

控制内容在**块元素**中的**水平对齐方式**（但不控制块元素自己的对齐方式），主要针对**文本**，但可以用于**图像**等使用属性 `inline-block` 的其他元素。

文本常见的对齐方式对应的属性值：

| 对齐方式 | 属性值 |
| --- | --- |
| 向左对齐 | `left` |
| 向右对齐 | `right` |
| 居中对齐 | `center` |
| 两端对齐 | `justify` |


### 缩进 text-indent
文本缩进的属性是 `text-indent`

属性值需要提供单位：
* `px`
* `em`值
* `%`

代码：`<p style="text-indent:......px">text</p>`

## 伪类
CSS 伪类 `pseudo-class` 是加在选择器后面的用来**指定元素状态**的关键字。如 `:hover` 可设置在鼠标悬停在选中元素上时应用相应的样式。

选择器使用关键符号 `:` 指明使用伪类选择器

代码：
```css
selector:pseudo-class {
  property: value;
}
```
解释：提高了某个选择器的的**确定度**，你便提高它的优先级，如对于某个特定元素的特定状态设置样式。

示例：
一个HTML表格有id 属性，但是它的行和单元格没有单独的id:
```html
<table id="data-table-1">
...
<tr>
<td>Prefix</td>
<td>0001</td>
<td>default</td>
</tr>
...
```
规则使表格每行的第一个单元格字体为粗体，使第二个单元格使用等宽字体
```css
/* 该规则只针对 id 为 data-table-1 的表格 */
#data-table-1 td:first-child {font-weight: bolder;} /* 使表格每行的第一个单元格字体为粗体 */
    #data-table-1 td:first-child + td {font-family: monospace;} /* 使第二个单元格使用等宽字体 */
```
效果：
![伪类](_v_images/20190819215203700_26379.png)


常见的伪类（各种常见的元素状态）:
### hover
`:hover`表示**鼠标悬停的状态**

### active
`:active`是按钮被按下激活时的状态，可以将按钮在该状态下的样子做出细微的变化，给用户一种按下了按钮的感觉

代码：

```html
<!--设置按钮悬停和点击两种状态的类-->
<style>
    /* 设置名称为 be 的类属性不同伪类（状态）时的样式 */
    .be:hover{
        background-color:pink;}
    .be:actie{
        background-color:darkcyan;}
</style>

<button class="be" type="button">搜索</button>
```



## 通配符
通配符可匹配特定类型的元素，如关键字符`*`，适配**所有元素**

用通配符 * 去掉所有的默认间距
```css
<!--使用通配符*匹配各元素，将所有元素/盒子模型的内边距 padding 和外边距 margin 都设置为 0，去掉所有的默认间距-->
<style>
    *{margin:0;padding:0}
</style>

<h1>我是h1标签</h1>
<p>我是p标签</p>
<div>我是div标签</div>
```

## 盒子样式 box
盒子全称是**CSS 盒子模型**，用`<div>......</div>`表示，包着HTML元素.盒子可以设置多种属性，可以拆分属性设置，也可以使用[简写属性](#简写属性)快速设置：

*  盒子尺寸：值需要提供单位 `px`、`em` 或者 `%`
    * 宽度属性是`width`：可采用**宽度限制**（根据浏览器屏幕大小展开或者收缩盒子），分别设置最小宽度的`min-width`和最大宽度`max-width`
    * 高度属性是`height`


### 边框 border
参考：[CSS 边框 `CSS Borders`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border)

盒子的边框属性是`border`有**多个（次级）属性**，可拆分设置，可以使用[简写属性](#简写属性)快速设置，如：
* 边框宽度
* 边框样式
* 边框颜色

#### 边框宽度 border-width
边框宽度属性`border-width`，单位为`px`

#### 边框样式 border-style
边框样式属性`border-style`
![CSS 各种边框样式](_v_images/20190817092112269_4321.jpg =722x)

可选多种属性值设置相应样式

| 样式 | 属性值 |
| --- | --- |
| 实线 | `solid` |
| 方形点 | `dotted` |
| 虚线 | `dashed` |
| 两条实线 | `double` |

#### 边框颜色 border-color
边框颜色属性`border-color`

#### 边框角度/形状 border-radius
边框形状属性`border-radius`，单位为`px`，`radius`是半径的意思，**数值越大，边框角的弧度越大**，属性后跟4个属性值，依次设定左上方，右上方，右下方，左下方（顺时针）的边框形状大小

四个角可以独立调整
* `border-top-right-radius`为右上方的角，可在后指定两个数值，圆角的**横向值**和**纵向值**指定不同的距离
* `border-bottom-right-radius`为右下方的角
* `border-bottom-left-radius`表示左下方的角
* `border-top-left-radius`表示左上方的角



### 盒子投影 box-shadow
盒子属性是`box-shadow`，可以使用阴影为图片增加深度感。

参考：。

其属性值可设置**5**个，依次为：
1. 水平偏移距离 `horizontal length`，**正数**表示阴影在盒子**右边**，负数表示在左边
2. 垂直偏移距离 `vertical length`，**正数**表示阴影在盒子**下方**，负数表示阴影在盒子上方
3. 模糊距离 `blur radius`，数值越大越模糊
4. 阴影延展 `spread radius`，数值越大阴影越大
5. 阴影颜色 `shadow color`，可以是颜色名称（也可以使用十六位进制编码模式）

可以使用 CSS matic [box-shadow 生成器](http://www.cssmatic.com/box-shadow)实时可视化阴影效果

### 内容溢出 overflow
设定内容溢出属性是`overflow`

有两个备选属性值：
* `hidden` 超出盒子部分的内容会被直接隐藏
* `scroll` 拖动显示超出盒子范围的内容

```css
<style>
    .simple {
        width: 600px;
        height: 300px;
        border-width: 9px;
        border-color: black;
        border-style: solid;
        overflow: scroll;}
</style>
```

### 内边距 padding
内边距`padding`指的是**内容与边框之间的空隙**
* 盒子上方的内边距为`padding-top`
* 盒子下方的内边距为`padding-bottom`
* 盒子右边的内边距为`padding-right`
* 盒子左边的内边距为`padding-left`

快捷表示，四个数值分别表示为上方，右侧，下方，左侧

```css
padding: 10px 5px 3px 1px
```

### 外边距 margin
外边距`margin`指的是**盒子之间的空隙**

`margin`属性可以跟一到四个值，依次表示上边距，右边距，下边距，左边距

也可以指定某一边的外边距
* `margin-top`
* `margin-bottom`
* `margin-right`
* `margin-left`

`margin`属性可以跟一到四个值
* 四个值
    ```css
  margin:25px 50px 75px 100px;
  ```
    分别表示上边距为25px，右边距为50px，下边距为75px，左边距为100px（分别按**顺时针**表示四边外边距的值）
* 三个值
    ```css
  margin:25px 50px 75px;
  ```
    上边距为25px，**左右**边距为50px，下边距为75px
* 两个值
    ```css
  margin:25px 50px;
  ```
    上下边距为25px，左右边距为50px
* 一个值
    ```css
  margin:25px;
  ```
    所有的4个边距都是25px

### 背景颜色
背景颜色属性是 `background-color`，后面可添加颜色名称或十六位进制

### 背景图像
属性 `background-image` 设置图像作为图像背景，后面使用 `url(filename)` 添加图片地址

```css
<style>
    div {
        background-image: url(file_name)
    }
</style>
```

背景图片大小（铺排方式）可以通过[属性 `backgroud-size`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/background-size) 设置。图片可以保有其原有的尺寸，或者拉伸到新的尺寸，或者在保持其原有比例的同时缩放到元素的可用空间的尺寸。

* `background-size: cover`：尽可能大的缩放背景图片以完全覆盖背景区，可能部分背景图片被裁剪而看不见。
* `background-size: contain`：缩放背景图片以**完全装入背景区**，以保证完整地展示图片，可能背景区部分空白。也可通过重复图片部分以覆盖包含块


## 隐藏元素
属性 `visibility` 设置盒子是否可视，但保留了元素原来占用的空间（占位）
* 属性值 `hidden` 用于隐藏元素
    若想在隐藏时，将占位的空白隐藏，可设置[属性`display`](file:///D:/Front_end/HTML/基本语法.md)的属性值为`none`（但使用浏览器“查看源码”选项，依然可见盒子中的内容）将该元素隐藏
* 属性值 `visible` 用于显示元素


```css
<style>
    li{
        display:inline;
        margin:10px;
    }
    li.coming-soon {
        visibility:hidden;
    }
</style>

<ul>
    <li>主页</li>
    <li>产品</li>
    <li class="coming-soon">服务</li>
    <li>关于</li>
    <li>联系人</li>
</ul>
```



## 链接样式
默认情况下，浏览器常常**以蓝色显示链接并附带下划线**。可通过修改链接样式，以帮助用户分清他们已经访问过哪些页面，使用关键字 `style` 设置样式

设置链接样式代码：
```html
<style>
    a:link{
        color:red;
    }
    a:hover{
        color:cyan;
        text-decoration:underline;
    }
    a:active{
        color:pink;
    }
    a:visited{
        color:pink;
    }
</style>
```

解释：上述建立了4个**伪类**（称为伪类，是因为我们是**基于元素的状态来决定选择何种样式**，而不是它的名字，或者属性）
* `a:link{}` 表示的是那些**还没有访问过的链接的样式**，这就是一种状态
* `a:hover{}` 表示的是**鼠标在链接上徘徊**，但是还没有点击的状态
* `a:active{}` 表示的是当这个**链接被点击后的状态**
* `a:visited{}` 表示那些**已经点击且浏览过了的链接样式**

创建链接使用代码：`<a href="url">text</a>`

## 列表样式
属性 `list-style` 设置列表的项目符号样式，后可跟两个属性值，分别代表**位置**和**项目符号样式**，也可以使用以下属性细分设置。

### 项目符号样式
属性 `list-style-type` 修改项目符号样式。项目符号就是在**每一行<li>元素的符号**

**无序列表**的项目符号样式属性值：
* `circle`表示空心小圆圈
* `square`表示实心小方块

```css
<style>
    ul{
        list-style-type:square;
    }
</style>
    
<ul>
    <li>Eat</li>
    <li>Pray</li>
    <li>Love</li>
</ul>
```

**有序列表**项目符号样式属性值：
* `decimal` 表示阿拉伯数字
* `lower-alpha` 表示**小写**英文字母
* `upper-alpha` 表示**大写**英文字母
* `lower-roman` 表示小写罗马字母
* `upper-roman` 表示大写罗马字母


### 项目符号图像
属性 `list-style-image` 修改项目符号图像样式。`list-style-image: url(" ")` 双引号里面放你想要的图片链接

```css
<style>
    ol{
       list-style-image:url("https://resource.bcgame-face2face.haorenao.cn/images/email.png"); 
    }
</style>
    
<ol>
    <li>Eat</li>
    <li>Pray</li>
    <li>Love</li>
</ol>
```


### 项目符号位置
属性 `list-style-position` 修改标记定位，属性值：
* `outside` 标记位于文本块左侧
* `inside` 标记位于文本块内部，同时**文本被缩进**


## 表格样式
表格标签

```css
<table>
    <tr>
        <th>title</th>
        <td>data</td>
        <td>data</td>
    </tr>
<table>
```

### 表格外形
* 属性`width`设置**表格宽度**
* 属性`background-color`设置表格背景颜色
* 属性`border`修改边框样式
    * 属性`border-top`修改上部边框样式
    * 属性`border-bottom`修改下部边框样式
* 属性`border-spacing`修改单元格之间的**空隙**，后跟两个数值
    * 第一个数值表示单元格**横向距离**
    * 第二个数值表示单元格**纵向距离**
* 属性`empty-cells`设置**空单元格**边框
    * 属性值为`hidden`时隐藏空单元格的边框
    * 属性值为`show`时显示空单元格的边框

### 内容排版
* 属性`padding`设置每个**单元格边框与其内容之间的空隙**
* 属性`text-align`设置表格中内容对齐方式，可以是左对齐或右对齐
* 属性`border-collapse`设置单元格相邻的**边框是否合并为一个单独的边框**

设置为`separate`后（默认）

![collapse_false](_v_images/20190504101218551_17712.png =667x)

设置为`collapse`后

![collapse_true](_v_images/20190504101337178_30754.png =667x)

* 属性`text-transform`将表格**标题内容转换为大写**

### 伪类
* `:hover`表示当用户把**鼠标悬停**在某个表格行时将此行强调显示


```css
<style>
    table{width:600px}
    th,td{padding:7px 10px 10px 10px;
        letter-spacing:0.1em;
        font-size:90%;
        border-bottom:2px solid #111111;
        border-top:1px solid #999;
        text-align:center;}
    tr:hover{
        background-color:#c3e6e5;}
</style>

<table>
    <tr>
        <th></th>
        <th>Saturday</th>
        <th>Sunday</th>
    </tr>
    <tr>
        <th>销售量</th>
        <td>120</td>
        <td>135</td>
    </tr>
    <tr>
        <th>销售量</th>
        <td>600</td>
        <td>675</td>
    </tr>
</table>
```

效果

![微信截图_20190504090113](_v_images/20190504090241852_14468.png)

*鼠标悬停所在的行背景色变绿色*


## 单行文本框
表单标签标签为`<input>`，会出现一个单行的输入框。
* 常见类型为`type="text"`
* 特殊类型为密码框`type="password"`

## 文本属性
* 属性`font-size`表示文本大小
* 属性`color`设置文本颜色

### 文本框属性
* 属性`border`设置文本框边框
* 属性`border-radius`创建边框圆角
* 属性`background-image`插入背景图，通过`background-image:url(" ")`（引号内添加图片地址）添加图片


### 伪类
* `:focus`可在用户使用文本框时改变颜色
* `:hover`可在用户将光标悬停在文本框时改变颜色


## 按钮样式
按钮标签`<button>text</button>`

### 文字属性
* 属性`color`设置控制按钮上文本的颜色
* 属性`text-shadow`展示3D效果文字（浏览器须支持）

### 按钮属性
* 属性`border-bottom`表示按钮下方的边框，调粗可产生逼真的3D效果
* 属性`background-color`设置按钮背景颜色

### 伪类
* `:hover`设置用户将光标悬停在按钮上时的样式



## 光标
通过更改光标样式，向用户传达信息会非常有效。大多数情况**浏览器会自动更改光标**，但是你可以使用光标属性来覆盖默认行为。

光标样式的属性是`cursor`

常见鼠标样式对应的属性值

| 光标样式 | 属性值 | 备注 |
| --- | --- | --- |
| 鼠标箭头样式 | `default` | 默认值 |
| 光标样式 | `auto` | 文本输入时的样式 |
| 十字架样式 | `crosshair` | |
| 小手样式 |`pointer` | |
| 等待样式 | `wait` | 加载转圈圈 |
| 帮助样式 | `help` | 鼠标样式后会有一个小问号 |


```css
<p>请把鼠标移动到单词上，可以看到鼠标指针发生变化：</p>
<p style="cursor:default">default</p>
<p style="cursor:auto">auto</p>
<p style="cursor:crosshair">crosshair</p>
<p style="cursor:pointer">pointer</p>
<p style="cursor:wait">wait</p>
<p style="cursor:help">help</p>
```

更多样式参考：[cursor](https://developer.mozilla.org/zh-CN/docs/Web/CSS/cursor)

## 标记图片
利用 CSS 设置图形的效果，如渐变、圆角、动画效果等，可以节省带宽。但需要注意特效的渲染成本，图形特效会[增加网页加载时间](https://www.smashingmagazine.com/2013/04/build-fast-loading-mobile-website/)，特别是在移动设备上。
![样式功能的加载时间](_v_images/20191017213617811_95.png)

### 符号字符
利用 [Unicode 字符集](https://en.wikipedia.org/wiki/List_of_Unicode_characters) 的符号字符可以实现大量图形标志，如箭头、星星或桃心等。以字体形式应用于网页中，避免使用图片文件，还支持多种 CSS 特效，而不会产生额外的网络流量。

可以在 [Unicode®字符百科](https://unicode-table.com/cn/) 查找需要的符号字符，可以插入 **HTML 代码** 或 **该符号字符**（推荐）复制到网页正文中

**注意**：使用 Unicode 字符时，为了确保浏览器正常显示，需要设置 `<head>` 标签中的 `<meta>` 标签的 `charset` 属性

```html
<head>
    <meta charset="utf-8">
</head>
```

并非所有浏览器默认情况下都能查看所有 unicode 字符所需的字体。[此站点](http://www.alanwood.net/unicode/#links)列出浏览器可以呈现的字符。

参考：
* [符号分类集汇 - Unicode®字符百科](https://unicode-table.com/cn/sets/)
* 如何[在 Windows 上通过 Chrome 启用 unicode](http://gschoppe.com/uncategorized/fixing-unicode-support-in-google-chrome/)

### 图标字体
![图标字体-zocial](_v_images/20191030224204470_6650.png =1000x)

图标字体 Icon font 可用来为网页提供小图标，与字体相似，可以通过 CSS 调整其大小、颜色等属性。这些图标字体都是**矢量图像**，可无限缩放。目前已有多种预设的图标字体可供使用（可以下载一整套图标字体，若提供在线版本也可以使用链接引用）：
* [Zocial](http://zocial.smcllns.com/)
* [Font Awesome](http://fontawesome.io/)
* [We Love Icon Fonts!](http://weloveiconfonts.com/)
* [Icon fonts on CSS-Tricks](https://css-tricks.com/examples/IconFont/)

### 内嵌图片
内嵌图片 inline image 可以减少网页 HTTP 请求次数，两种方式实现内嵌图片：

* SVG
* DataURI

参考：
* [行内 SVG 浏览器支持](http://caniuse.com/#feat=svg-html5)

* [数据 URI 浏览器支持](http://caniuse.com/datauri)

* [SVG 优化工具](http://petercollingridge.appspot.com/svg-optimiser)

* [Trajan 的 Column SVG 例子](http://upload.wikimedia.org/wikipedia/commons/6/6c/Trajans-Column-lower-animated.svg)

* [20 个让你惊艳不已的 SVG 例子](http://www.creativebloq.com/design/examples-svg-7112785)

* [SVG 动画示例](http://codepen.io/chrisgannon/)