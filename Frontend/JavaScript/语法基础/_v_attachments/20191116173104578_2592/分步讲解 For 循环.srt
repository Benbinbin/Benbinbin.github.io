1
00:00:00,410 --> 00:00:03,640
for 循环是 JavaScript 中最常见的循环类型

2
00:00:03,640 --> 00:00:06,759
与之前的 while 循环不同的是

3
00:00:06,759 --> 00:00:09,822
你必须明确地为 for 循环定义

4
00:00:09,821 --> 00:00:11,279
循环的起始点和终止点

5
00:00:11,279 --> 00:00:14,362
以及循环进行到下一步的方式

6
00:00:14,362 --> 00:00:18,518
现在 你可能会问自己 这与 while 循环有任何区别吗？

7
00:00:18,518 --> 00:00:22,060
在 while 循环中 我同样要指定这一切

8
00:00:22,059 --> 00:00:24,559
区别在于

9
00:00:24,559 --> 00:00:28,419
在 for 循环中 要预先在 for 语句中定义这一切

10
00:00:28,420 --> 00:00:32,820
在本例中 我使用 for 循环输出从 0 到 5 的值

11
00:00:32,820 --> 00:00:34,880
我们来看看如何设置

12
00:00:34,880 --> 00:00:38,670
标准的 for 循环同样需要之前提到的三部分信息

13
00:00:38,670 --> 00:00:42,820
这些信息通过分号隔开

14
00:00:42,820 --> 00:00:44,880
第一部分是循环的起始点

15
00:00:44,880 --> 00:00:48,070
本例中有一个被设为 0 的变量 i

16
00:00:48,070 --> 00:00:50,789
第二部分是循环的终止点

17
00:00:50,789 --> 00:00:54,009
它表明了我们希望何时终止循环

18
00:00:54,009 --> 00:00:58,109
在本例中 我们希望循环在变量 i 不再小于 6 时

19
00:00:58,109 --> 00:01:00,119
终止执行

20
00:01:00,119 --> 00:01:04,628
如果 i 不再满足该条件 则退出循环

21
00:01:04,629 --> 00:01:06,605
for 循环的第三部分 即最后一部分是

22
00:01:06,605 --> 00:01:09,615
循环应如何进行到下一步

23
00:01:09,614 --> 00:01:13,426
在本例中 我们希望循环每运行一次

24
00:01:13,427 --> 00:01:16,235
i 的值就增加 1

25
00:01:16,234 --> 00:01:18,073
这就是具体设置

26
00:01:18,073 --> 00:01:21,361
在接下来的这部分中 我将演示

27
00:01:21,361 --> 00:01:22,519
for 循环的每一次迭代

28
00:01:22,519 --> 00:01:25,689
实际上 由于代码的执行速度很快

29
00:01:25,689 --> 00:01:30,230
你通常不会思考或留意循环如何进行每次迭代

30
00:01:30,230 --> 00:01:32,990
因此 我在这里减慢代码的执行速度

31
00:01:32,989 --> 00:01:36,339
让你了解代码运行时是如何被解释的

32
00:01:37,430 --> 00:01:39,004
我还添加了这个表格

33
00:01:39,004 --> 00:01:42,047
让你看到 i 在整个循环中的值

34
00:01:42,046 --> 00:01:45,411
如果你编写过循环 但它没有严格按照你的设想来执行

35
00:01:45,411 --> 00:01:48,730
则这样的练习可能会很有帮助

36
00:01:49,879 --> 00:01:50,405
最后

37
00:01:50,406 --> 00:01:53,850
我将此代码粘贴到控制台中 让你了解它全速运行时的情况

38
00:01:53,849 --> 00:01:57,930
循环开始时 i 设置为 0

39
00:01:57,930 --> 00:02:02,283
然后 我们检查条件 看看 i 是否小于 6

40
00:02:02,284 --> 00:02:05,430
如果该条件为 true 则进入循环

41
00:02:05,430 --> 00:02:08,000
在这条语句中 将只输出 i 的值

42
00:02:08,000 --> 00:02:10,500
因此 输出 i = 0

43
00:02:10,500 --> 00:02:11,240
太棒了

44
00:02:11,240 --> 00:02:13,390
我们刚刚完成了循环的第一步

45
00:02:13,389 --> 00:02:17,229
现在 看一下我们定义的进行到下一步的方式

46
00:02:18,340 --> 00:02:21,030
代码跳回到这里

47
00:02:21,030 --> 00:02:25,090
i 的值将增加 1 现在它等于 1

48
00:02:25,090 --> 00:02:28,519
我们再次检查条件 确保跳入循环

49
00:02:28,519 --> 00:02:31,894
如果 i 小于 6 则条件求值结果再次为 true

50
00:02:31,894 --> 00:02:35,006
我们将跳回循环 再次运行该语句

51
00:02:35,006 --> 00:02:37,300
现在 输出 i = 1

52
00:02:37,300 --> 00:02:41,430
我们将继续此过程

53
00:02:41,430 --> 00:02:44,189
直至 i 小于 6 这个条件不再为 true

54
00:02:44,189 --> 00:02:46,365
i 的值将增加 1

55
00:02:46,366 --> 00:02:47,406
现在值为 2

56
00:02:47,406 --> 00:02:48,800
看一下条件

57
00:02:48,800 --> 00:02:51,748
条件求值结果再次为 true 输出值

58
00:02:51,747 --> 00:02:56,650
我可以一直进行此过程

59
00:02:56,651 --> 00:03:01,084
最后 i 将等于 6 而 6 并不小于 6

60
00:03:01,084 --> 00:03:03,090
我们继续

61
00:03:03,090 --> 00:03:04,430
值为 4

62
00:03:04,430 --> 00:03:05,460
现在为 5

63
00:03:05,460 --> 00:03:06,849
条件仍为 true

64
00:03:06,849 --> 00:03:08,620
输出值

65
00:03:08,620 --> 00:03:10,099
好了 就要结束了

66
00:03:10,099 --> 00:03:13,400
我们再次将值增加 1 现在值为 6

67
00:03:13,400 --> 00:03:16,599
当我们检查条件时 条件判断的结果为 false

68
00:03:16,599 --> 00:03:18,795
此时跳出循环

69
00:03:18,795 --> 00:03:21,305
为了展示全速运行的 for 循环

70
00:03:21,306 --> 00:03:23,171
我已将它粘贴到控制台中

71
00:03:23,170 --> 00:03:27,262
当我按下 Enter 键时 就会输出

72
00:03:27,262 --> 00:03:28,008
0、1、2、3、4、5

73
00:03:28,008 --> 00:03:31,031
而一旦值等于 6 条件不再为 true

74
00:03:31,031 --> 00:03:32,250
就会跳出循环

